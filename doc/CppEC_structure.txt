CppEC: C++ Event Compiler.
    - c++-code => .xml
    - output:
        - project/common_events.xml:
            => list of common events.
        - project/switch_names.txt:
            - Each Line is one switch id, list the name of them.
        - project/var_names.txt:
            - Each Line is one variable id, list the name of them.

- thirdparty:
    tinyxml2

- RPG Info:
    - RPG_RT.edb (xml):
        - <LDB><Database></Database></LDB>
        - <switches>:
            <Switch id="0001">
                <name>init_done</name>
            </Switch>
            - every switch up to a set max-number in editor is here, even if it has no name.
            - id: 0001-9999
        - <variables>:
            <Variable id="0001">
                <name>pic_pox_x</name>
            </Variable>
            - every variable up to a set max-number in editor is here, even if it has no name.
            - id: 0001-9999
        - <commonevents>:
            - <CommonEvent id="0001">
                - name
                - trigger:
                    - 3 = autorun
                    - 4 = parallel process.
                    - 5 = none
                - switch_flag: F(alse), T(rue)
                    - condition switch.
                - switch_id:
                    1 is used if switch_flag == False
                    otherwise id â‚¬ 1-9999
                - <event_commands>
                    - list of event_commands
        
        - event commands:
            - it seams an "Event-Command" is just a line :/
                - So an actual command is multiple "Event-Commands"
            <code>:
                A number that represents which command
            <indent>:
                1-x: indent level.
                Kinda like Python: Same indent => same codeblock until lower indent is reached.
            <string>: 
                if one of the parameters is a string
            <parameters>:
                multiple parameters, which are numbers seperated by " ".
            
            => Instead of creating a HUGE LIST of all the commands and how they are structured.
            => Use emu_example_RPG_RT.edb file and just directly write parser :/ (read/write).
        
    - commands i need:
        - Show Text:
        - Show Choices:
        - Input Number:
        - Control Switches:
        - Control Variables:
        - Change Item:
        - Change Party Member:
        - Change EXP:
        - Change Parameters:
        - Change Equipment:
        - Set Event Location:
        - Get Event ID:
        - Show Picture:
        - Show/Hide Player:
        - Key Input Processing:
        - Conditional Branch:
        - Jump to Label:
        - Label:
        - Loop:
        - Break Loop:
        - End Event Processing:
        - Erase Event:
        - Call Event:
        - Comment:

- sequence:
    - set variable names.

    - set switch names.

    - compile and write each c-function to common event:

    - write output .xml file using tinyxml2


- Interface:
    - common RPGMaker2003 Interface exists.
    - functions that can be 1-to-1 mapped to RPGMaker
    - go through C-Code from top to bottom and map functions.
    - more intelligent mapping to basic C keywords (if) to RPGMaker2003 commands (if).

- Questions to answer:
    - Syntax to define common event and it's code in c.
        - name, trigger, flags.
    
    - Variable names cannot be changed.
        - They are defined during compile time.
        - Need clear names for them!
    
    - Mapping from RPG Maker Interface to xml.
        - one command in RPG Maker mapps to multiple commands in code (loc).
        - Could hardcode mapping in code => messy.
        - can i provide a mapping file?
            - .JSON?
            - used during runtime.
            - this mapping file provides with template information.


- Generation Solutions:
    - Function parameter + return value:
        - 1st: Parameter Stack 
            - Create a stack system and generate code on that, similar to function stacks.
        - 2nd: Hardcoded Adresses 
            - Each function has their dedicated and hard coded variables the use for params and return values.
            - 2 Params and 1 Return Value => 3 Variables returns.
            - 2 can save some commands (better performance) at the cost of memory.
            - Cannot support recursion and foo()->bar()->foo()
        - 3rd: Hybrid
            - Always use version 2 where possible.
            - after calling a function, set the hard coded variables to a default value (-MAX_INT)
            - This indicates that they are not in use.
            - If they are already in use (foo()->bar()->foo()), then use the stack.
            - This could create too much overhead and actually hurt performance.


- Phases:
    - 1st Phase: Homogenization
        - Take the code and change it so that it is more directly compatible with the way RPG Maker can do certain things
            e.g.
            if(rpgMaker->KeyInputProcessing(RPGMAKER::KeyCodes::LEFT))
            =>
            bool temp = rpgMaker->KeyInputProcessing(RPGMAKER::KeyCodes::LEFT);
            if(temp)
        
        - This is still normal and valid C++ code, just sometimes more verbose to make it easier for the next phase.
        - This can make my emulator code look nicer, but doesn't make the actual compilation harder.
        - This phase wants to change the goal to make any kind of operation look the same (Homogeneous)
        
    - 2nd Phase: Language Feature Generation
        - Some things still need to be generated that are given basics in C++.
        - example: We need to generate some code to generate the variable stack.
            bool temp = rpgMaker->KeyInputProcessing(RPGMAKER::KeyCodes::LEFT);
            the temp is a variable that needs to create something on the stack.
        - This will still be valid C++ code, but it uses some extra helper libraries (like my stack).
    
    - 3rd Phase: Translate
        - Now that the code is preprocessed you can just go through the code line by line and simply convert to RPG Maker commands.
    
    - It would be cool if the code after Phase 1 and 2 is still technical valid C++ code, can be exported to files and be run in the environment to check where a stage fails to change the code.