gb2RPG: Gameboy 2 RPG Maker.
    - creates map from .gb file.
    - creates maptree.
    - creates database.
      - can additionally specify common event file (my code).
    - generate the project folder structure.
      - output C++ Project.
      - output EasyRPG Project.
      - output RPG Maker 2003 Project.


- TODO:
    - Need to provide the EasyRPG/RTP replacement.
        - Just copy it into the project?
        - EasyRPG/RTP does not work correctly.
        - It does use different names for the RTP.
        - Change base templates to use Local files not RTP? Can I use RTP myself?
    
    - could use a way to show the percentage done.
        - Percentage Done: use std::cout.
        - can have 1/x stages with percentage bar.
        - could just print it in main: std::cout << "1/5: Cleaning project folder.";
            - But that does not seem very clean.
            - should be something that is invisible in main.
    
    - Should find a cleaner way for printing errors and printing the info CLI-info string in main.   
    - Implement more Robust Error Checks.

    - Unit tests:
        - Using Catch2.
        - Integrate Unit tests into CMake!

    - Abstract away the actual Library I'm using to load/save and manipulate the RPGMaker Files (also needed later for Compiler).
        - More High-Level File changes.
        - Can then silently change out tinyxml2 for other library.
        - Also: Makes Generator Code more readable. Has to focus more on what you need to generate and not how to manipulate the underlying file.

        - Write Functions for setting/generating event-commands of different types.
            - 
            - set/copy/generate ...
            - setCommandParams
                !- GENERAL Function. (element and argument list)
                ALSO:
                    - Create other functions that build on top of that which have types for the parameters.
                    - setConditionalBranchParams etc.
                    - also need Typedefs (enums?) for the paramters, so that I do not punch in magic numbers.
            - setEventIDNameCoord
            - Libraries of Functionality that allows me to manipulate event-commands.
            - should work ontop on the tinyxml2 library and changes I do to that.

        - Event-Generation and Manipulation can be made more general.
            - Map::generateDMGROM(), generateMapRAM() and generateMapROM() are structurely very similar:
                - generate code for event-page
                - insert code in event-page
                - setEventPageID()
                - insert event-page into event
                - setEventIDNameCoord()
                - insert event into map.
            - could be more generalized.
                - maybe not one function but certain sub-functions?
            - But I do not know yet how compiler will need to work and how it uses it.
            - Event-Manipulation is similar for Map and Compiler.
    
        

    - Memory Leak?:
            //TODO: calling DeepClone/ShallowClone creates a leak somehow (?)
            /*
            // Total: 180kB
            int a = 10;
            {
                tinyxml2::XMLDocument map;
                map.LoadFile(TEMPLATES::MAP);
                tinyxml2::XMLDocument t;

                // Total 2.716kB

                // Creates 2.656, New Total: 5.372kB
                auto* copy = map.RootElement()->DeepClone(&t);
            }
            // Total: 240kB, 60kByte Leaked: 
            int b = 10;
            */
    

    - Performance:
        - 2 MByte Cartidge: 16GB RAM, 2m20s, 1.6GB XML File.
        - Loading the 1.6GB XML file takes up 14.1GB RAM and When Creating it I use up over 16GB!

        - less memory usage:
            - shortterm solution:
                - can use https://libexpat.github.io/
                    https://github.com/libexpat/libexpat
                    this is what lcf2xml uses. 
                    - stream-oriented XML parser.
                    - good if files are too large to fit into RAM.
                - lcf2xml only requires 600mb of memory in comparison to tinyxml2's 16GB!
                - lcf2xml only takes 44 seconds in comparison to my 2m20s (but it's task might be simpler!).

            - longterm solution:
                - directly work on the binary file.
                    - 1.6GB of XML (MAP.emu for 2MB ROM) equals 95,4MB of Binary format (.lmu).
                    - Can I find a comprehensive RPG Maker file structure reference?
                    - Even the CPP Project could use the binary files, If I create my own library, or use certain elements from easyRPG.
        
        - I could multithread parts of the map generation as it can take a long time.
            - Generating the Mapfile for Pokemon Red takes 2m20s for a 2 mByte Cartridge. 
            - Each Thread is responsible for multiple Event pages (when reading cartridge).
            - Even with Tetris (32 kByte) and 3.000Bytes/Page I could have ~11 Threads in parallel!.
        
        => Binary File + Multithreading:
            - Do not need to stitch together or stream the XML file.
            - Binary file are at max 100mb => keep it just in memory.
            - Have a list of std::vector<EventPage>. Each thread fills one of those vectors.
            - Then just write the binary file for each event.





- thirdparty:
    liblcf
    tinyxml2


- ROM/RAM Data:
    MAP-ROM: Events + Pages
    MAP-RAM: Event + Position!
    DMG-ROM: One Event.

- RPG Info:
    - commands i need:
        - Control Variables:
        - Conditional Branch:
        - Label:
        - Jump to Label
        - Call Event:
        - Comment:

    - Map0001.emu (.xml):
        - <events>: List of events
        - <event id="0001">
            <name>MAP-ROM-001</name>
            <x>0</x>
            <y>0</y>
            <pages>: List of Pages
        - <EventPage id="0001">
        - I do not need to change all the other settings 
            => Can use a template file.

- sequence:
    - read cartridge header:
        - $0100-$014F
            Entry Point:        4 Bytes     Binary
            Nintendo Logo:      48 Byte     Binary
            Title:              11 Byte     ASCII
            Manufacturer Code:  4 Byte      ASCII
            CGB Flag:           1 Byte      Binary
            New Lincensee Code: 2 Byte      Binary
            SGB Flag:           1 Byte      Binary
            Cartridge Type:     1 Byte      Binary
            ROM-Size:           1 Byte      Binary
            RAM-Size:           1 Byte      Binary
            Destination Code:   1 Byte      Binary
            Old Lincensee Code: 1 Byte      Binary
            Version number:     1 Byte      Binary
            Header Checksum:    1 Byte      Binary
            Global Checksum:    2 Byte      Binary
        
        - read ROM-Size and RAM-Size.
        - later: Title (to show in RPG Maker!)
    
    - Create Map File:
        - load map-template

        - add DMG-ROM Event:
            => Create my own DMG-ROM in C-Code similar to Emulator C-Code.
                => good test for emulator.
                => better from a legal standpoint than to use actual DMG-ROM.
                => so this event is different to the other events. Actual logic.
            
            - use event template.
            - Read DMG_ROM.cpp file.
            - use CEC to compile into .xml
            - create an Event to the map with .xml as code.
            
        - add MAP-ROM Events: (Cartridge-ROM)
            - read from actual .gb file (input).
            - use event template.
            - use rom-size:
            - code:
                - Code is binary jump.
                Header:
                    ByteOffset = ByteOffset / BYTES_PER_VAR
                    LabelID = ByteOffset
                    LabelID += 1
                    JumpToLabel numLabels / 2;
                Label-Boilerplate:
                    Label X
                    if (LabelID < X)
                        JumpToLabel X - (min(X, 1.000 - X) / 2)
                    if (LabelID > X)
                        JumpToLabel X + (min(X, 1.000 - X) / 2)
                    READVAR1 = LABELXVALUE1
                    READVAR2 = LABELXVALUE2
                    EndEventProcessing


        - add MAP-RAM Events: (DMG-RAM)
            - 500 by 500 map.
            - use event template.
            - Add empty events. Only Thing I need is position.

        - write output .xml file.

        - call LCF2XML to turn into mapfile.

    - Create Maptree File:
        - I think I don't need to change the template. should work like that.
        - if I want to support multiple gameboy games and mapfiles later I might need to change it.

        - call LCF2XML to turn into maptreefile.

    - Create Database File:
        - load database-template.
        
        - add CHARA-RAM:
            - add items:
                - use item template.
                - create 9216 items.
                - item-id defines which item type it is.
            
            - add characters:
                - use character template.
                - create 2966 characters.

        - add EMU Code:
            - load the emu-code .xml (if available)
            - copy:
                common events, switches, variables to database.

        - write output .xml file.

        - call LCF2XML to turn into databasefile.
    
    - Create project folder:
        - folder structure (empty folder):
            - Title, System2, System, Sound, Picture, Panorama, Music, Movie, Monster, GameOver, Frame, FaceSet, ChipSet, CharSet, BattleWeapon, BattleCharSet, Battle2, Battle, Backdrop
        - copy compiled data:
            mapfiles (Map0001.lmu,...), maptree (RPG_RT.lmt), database (RPG_RT.ldb)
        - copy required data:
            RPG_RT.ini, *.r3proj, ultimate_rt_eb.dll, RPT_RT.exe
    
- Code structure:
    - filepaths should be defined in one header file as #define!
    - to have them globally set!