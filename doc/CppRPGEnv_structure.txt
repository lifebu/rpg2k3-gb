CppRPGEnv: C++-RPG Maker Environment
    - C++-code can be run outside of RPG Maker so that I can debug it normally without dependencies.
        - Plattform Code that runs my code (kinda like engine).

- C++ Emulator Code is treated as the CommonEvents for the Runtime Environment.
    - Compile as .lib file.


- My C++-Code that implements the actual emulator uses a header file (RPGDef.h)
    => THIS IS AN API / INTERFACE.
    - This header declares the functions of the RPG Maker code that I use.
        - Like changeEXP(), setEventLocation().
    - It could also defines the variables and switches with their names. (?)
        - My C++-Code should set the names (?)

- Interface:
    - RPG Maker Commands:
        Debug & Menu:
            Show Text:
                - could redirect to cout.
            Show Choices:
            Input Number:
        CHARA RAM:
            Change Item
            Change Party Member
            Change EXP
            Change Parameters
            Change Equipment:
        Events:
            Set Event Location
            Get Event ID
            Erase Event
            Call Event
            End Event Processing
            Comment
        Rendering:
            Show Picture
            Show/Hide Player
        Input:
            Key Input Processing
    
    - Code Constructs:
        Control Switches = Bool operations
        Control Variables = int operations
        Conditional Branch = IF-Else
        JumpToLabel/Label = Goto
        Loop/Break Loop = Any kind of loop

    - Other RPG Maker Related Functions:
        Setting Name of Variables/Switches.

- Runtime Tasks:
    - Call Common Events:
        - list of Common Events, that are Parallel Processes.
        - Call each of them once per frame.
    
    - Framerate Control:
        - 60fps.
        - Common Event can reduce framerate.
    
    - Rendering:
        - Resolution:
            4:3, 
        - Show Text:
            - Textbox: 30% of Bottom Screen, Blue.
            - 4 lines of text can fit.
        - Show Choices:
            - 4 possible Inputs to choose from. Same Textbox
            - just 4 lines of Text to select from.
        - Input Number:
            - x number of digits.
            - basically like a pad lock.
        - Show Picture:
            - Basically just a sprite!.
        - Show/Hide Player (Ignore!).#
    
    - Key Input:
        - Basically just a few keyboard keys you can use.
    
    - Data:
        - Load Maptree file (tinyxml2). So you know where the player starts.
        - Load Mapfile.
        - Load Database.
        - All of them need classes/functions for the specific parts.

- The Header is implemented in a Runner
    - Some functions just change the state of the environment.
        - changeExp(), setEventLocation()
        - It has a simplified RPGMaker state representation.
    - Some functions need to do real I/O:
        - 2D-Rendering / Blitting (SDL? SIMPLE OpenGL?)
            - showText(), showChoices(), inputNumber(), showPicture(), 
        - keyInputProcessing()

- Can use SFML to create the basic graphic/window layer.
    https://www.sfml-dev.org