gb2RPG: Gameboy 2 RPG Maker.
    - creates map from .gb file.
    - creates maptree.
    - creates database.
      - can additionally specify common event file (my code).
    - generate the project folder structure.
      - output C++ Project.
      - output EasyRPG Project.
      - output RPG Maker 2003 Project.


- TODO:
    - Tools:
        - Unit tests:
            - Using Catch2.
            - Integrate Unit tests into CMake!

    - Code Cleanup:
        - constants:
            - Make clear from the constants path which of them are variable constants and which constants are hardcoded because of RPG MAKER limitations.

        - Clean up serializer structure:
            - Do I need the structure for the serializers?
            - WAY to much structure for little gain.
            - currently 1.800 lines of code :/
            - Also: Way to many classes that only have a couple of LOC.
        
        - I am not sure about the LCFType for Switches/Variables.
            - Don't save a lot of code anymore and basically the same.
            - makes it uneccessarily complex.
        
        - use a precompiled header for the STL elements I use.
   
        
    - Code Style:
        - Write a small code style guide.

        - Add Documentation!

        - Implement more Robust Error Checks.

        - Better includes in core:
            #include "src/core/lcf/Switch.h"
            =>
            #include "core/lcf/Switch.h"
            and no relative includes pls!
        
        - stop using: "using namespace gb2rpg"
                => better to read if you know the namespace.

        - Once I'm done with the refactor do additional passes for code quality for example moving instead of copying (use my Short-Version.yml: Coding Task Checklist ).

        - only make accessor where it makes sense and it does something.
        
    - Function:
        Later:
        - Serializers: remove the Indententation System:
            - When writing out event commands keep track of the current indentation and write it out.
            - When you encounter certain commands (like if-statements), then you increment the indentation (after the if-statement is created).
            - When you encounter other commands (like end-if-statements), then you decrement the indentation (before the end-if-statement is written).
            - Idea:
                2 cases "PreCommandChange" and "PostCommandChange" each has a function where depending on the current command type the current indentation will be incremented or decremented.
                - both functions are basically switch-cases to say when to change  the indentation.
                - When generating code xml-files (basically multiple top-level event commands) ignore the generation of the indentation.
                - Only when generating them for the Map and DB you want to generate them.
                - Increment on:
                    - MultilineComment, Choice Case, Brancth Start, Loop Start, MultiLinShowText
                - Decrement on:
                    - Choice Case, Branch Else (else decrements itself), branch end, loop end.
               
        - Add the following EventCommands to Factories for the Runtime Environment:
            - Show Choices, Input Number, Change Item, Change Party Member, Change EXP, change parameters, change equipment, set event location, get event id, erase event, call event, show picture, show/hide player, key input processings.
        
        - Serializers: remove the id system?
            - Do the partial types like items really need an id?
            - the id is only part of their container (database).
            - the database can manage request of finding a type based in id.
            - But I can also completly delete all the IDs because they are only relevant when you serialze them data into .xml. Not before.
                => Can then generate the IDs.
            - Hold on to the Id-System for now, maybe it I need it for the CodeGen.

        - Most of the Datatypes are not shared. 
            - For example switch, variables, characters, items and common events are only used by the Database file => Can add the class declarations in Database.h and not in so many header files.
            - The only thing that is actually shared is a eventcommand.
            - If the definition is inside of the Database class can switches etc. just be POD types instead of classes? (No need for getters/Setters).

        - Add bounded values to every public data member where it makes sense.
            - It is used like a normal primitive type (int)
            - But does range checking for a public variable.
            - template<type>: type is the primitive type.
                - template does range checks.
                - wrapper template.
            - Debug feature that can be turned off.
            - It checks when setting, incrementing (normal integer operations), if operation is permitted against boundaries
            - If not => error message and ignore request.
            - Create typedefs for common RPG Maker value ranges.
            - Like ID-Range, 10Million Range etc.
            - List of Ranges:
                ID: 1-9.999
                Character-ID: 1-RPGMAKER::MAX_NUM_CHARS
                Switch-IDs: 1-RPGMAKER::MAX_NUM_SWITCHES
                Variable-IDs: 1-RPGMAKER::MAX_NUM_VARIABLES
                Event-Pages: 1-RPGMAKER::MAX_PAGES_PER_EVENT

        - EventCommandFactories:
            - I now have low-level factories to set the actual event command.
            - It would be nice to have a more "high-level" event command generation, wher you do not have to set every little thing?
            - But I should wait for that until I do the actual code gen?
                - Maybe this is not needed as there are only very few places where actual event command generation is done.

            - Checks for the Inputs?
                - Some of the Inputs are dependent on each other.
                - If you use a specific flag, other parameters will be interpreted differently.

        - RPGHelper:
            - The functions should be in a namespace.
            - Need a better place for all the functions.

        - Performance:
            - 2 MByte Cartidge: 16GB RAM, 2m20s, 1.6GB XML File.
            - Loading the 1.6GB XML file takes up 14.1GB RAM and When Creating it I use up over 16GB!
            - Resulting Binary File is: 95,4 MByte.

            - Mapsize (generated Code):
                - Pokemon Red (1MByte):
                - Header:
                    - 6 commands per page for the Header, 350 pages.
                    - Total => 2.100
                    - Single Command Less saves: 350 EventCommands
                - Label:
                    - 12 commands per label * 1.000 Labels = 12.000 commands per page.
                    - @ 350 pages.
                    - Total => 4.200.000 event commands
                    - Single Command less saves: 350.000 commands
                => Total size of xml file: 2.3GB

                - Reduction:
                    - 2 commands in label, 2 command in header.
                    => reduce by 700.700 commands (16%).
                    => Filesize: 300MByte less.
                    => Reduced by 13%

                - Binary Search (1.400 + 3.500.000 = 3.501.400 (83%)):
                    - Header (4):
                    ByteOffset = (ByteOffset / BYTES_PER_VAR):
                    LabelID = ByteOffset
                    LabelID += 1
                    JumpToLabel numLabels / 2

                    - Label (10):
                    Label X
                    IF(LabelID < X)
                        JumpToLabel X - (min(X, 1.000 - X) / 2)
                        or:
                        EndEventProcessing
                    ENDIF
                    IF(LabelID > X)
                        JumpToLabel X + (min(X, 1.000 - X) / 2)
                        or:
                        EndEventProcessing
                    ENDIF
                    READVAR1 = LABELXVALUE1
                    READVAR2 = LABELXVALUE2
                    EndEventProcessing

                - Linear (1.050 + 1.750.000 = 1.751.050 (40%)):
                    - Header (3):
                    ByteOffset = (ByteOffset / BYTES_PER_VAR):
                    LabelID = ByteOffset
                    LabelID += 1

                    - Label (5):
                    IF(LabelID == X)
                        READVAR1 = LABELXVALUE1
                        READVAR2 = LABELXVALUE2
                        EndEventProcessing
                    ENDIF
                
                - Linear:
                    - To combat the slowness of the system I could reduce VARS_PER_EPAGE.
                
                - Linear + Binary:
                    - Mostly linear but we have a couple of start points (jumped to by the header).
                    - We can have 10 Linear reagions each responsible for 100 Values for the 1.000 VARS_PER_EPAGE.
                
                - 

                


                
            
                

            - less memory usage:
                - a) Use different XML Library:
                    - can use https://libexpat.github.io/
                        https://github.com/libexpat/libexpat
                        this is what lcf2xml uses. 
                        - stream-oriented XML parser.
                        - good if files are too large to fit into RAM.
                    - lcf2xml only requires 600mb of memory in comparison to tinyxml2's 16GB!
                    - lcf2xml only takes 44 seconds in comparison to my 2m20s (but it's task might be simpler!).
                
                    - Tried testing rapidxml:
                        It is way faster, requires way less Memory (~40%)
                        - But currently the output file is corruptes :/
                        - Need to fix tat.

                - b) Directly work on the binary file:
                    - 1.6GB of XML (MAP.emu for 2MB ROM) equals 95,4MB of Binary format (.lmu).
                    - Can I find a comprehensive RPG Maker file structure reference?
                        => Probably not.
                        - A lot of work to reverse engineer liblcf and/or lcf files.
                    - Even the CPP Project could use the binary files, If I create my own library, or use certain elements from easyRPG.
                    - Rewrite my serializers to work on binary files.
                    - How do I then do the template files?
                    
                - c) I could multithread parts of the map generation as it can take a long time.
                    - Generating the Mapfile for Pokemon Red takes 2m20s for a 2 mByte Cartridge. 
                    - Each Thread is responsible for multiple Event pages (when reading cartridge).
                    - Even with Tetris (32 kByte) and 3.000Bytes/Page I could have ~11 Threads in parallel!.
                    - You can also (more easily) parallelise on the file level.
                
                - What I'll do:
                    use a) + c)
    
        - Need to provide the EasyRPG/RTP replacement.
            - Just copy it into the project?
            - EasyRPG/RTP does not work correctly.
            - It does use different names for the RTP.
            - Change base templates to use Local files not RTP? Can I use RTP myself?
            - No structure with overloads just some functions that use the same name
                - Don't like the constructor calls for basically static functions

        - Memory Leak?:
            //TODO: calling DeepClone/ShallowClone creates a leak somehow (?)
            /*
            // Total: 180kB
            int a = 10;
            {
                tinyxml2::XMLDocument map;
                map.LoadFile(TEMPLATES::MAP);
                tinyxml2::XMLDocument t;

                // Total 2.716kB

                // Creates 2.656, New Total: 5.372kB
                auto* copy = map.RootElement()->DeepClone(&t);
            }
            // Total: 240kB, 60kByte Leaked: 
            int b = 10;
            */
            If I load the XML file from memory, the entire file is somehow leaked.
            You can see that in the cppRPGEnv, where the memory usage did not go down after loading the XML file :/

Info:
    - ROM/RAM Data:
        MAP-ROM: Events + Pages
        MAP-RAM: Event + Position!
        DMG-ROM: One Event.

    - RPG Info:
        - commands i need:
            - Control Variables:
            - Conditional Branch:
            - Label:
            - Jump to Label
            - Call Event:
            - Comment:

        - Map0001.emu (.xml):
            - <events>: List of events
            - <event id="0001">
                <name>MAP-ROM-001</name>
                <x>0</x>
                <y>0</y>
                <pages>: List of Pages
            - <EventPage id="0001">
            - I do not need to change all the other settings 
                => Can use a template file.

    - sequence:
        - read cartridge header:
            - $0100-$014F
                Entry Point:        4 Bytes     Binary
                Nintendo Logo:      48 Byte     Binary
                Title:              11 Byte     ASCII
                Manufacturer Code:  4 Byte      ASCII
                CGB Flag:           1 Byte      Binary
                New Lincensee Code: 2 Byte      Binary
                SGB Flag:           1 Byte      Binary
                Cartridge Type:     1 Byte      Binary
                ROM-Size:           1 Byte      Binary
                RAM-Size:           1 Byte      Binary
                Destination Code:   1 Byte      Binary
                Old Lincensee Code: 1 Byte      Binary
                Version number:     1 Byte      Binary
                Header Checksum:    1 Byte      Binary
                Global Checksum:    2 Byte      Binary
            
            - read ROM-Size and RAM-Size.
            - later: Title (to show in RPG Maker!)
        
        - Create Map File:
            - load map-template

            - add DMG-ROM Event:
                => Create my own DMG-ROM in C-Code similar to Emulator C-Code.
                    => good test for emulator.
                    => better from a legal standpoint than to use actual DMG-ROM.
                    => so this event is different to the other events. Actual logic.
                
                - use event template.
                - Read DMG_ROM.cpp file.
                - use CEC to compile into .xml
                - create an Event to the map with .xml as code.
                
            - add MAP-ROM Events: (Cartridge-ROM)
                - read from actual .gb file (input).
                - use event template.
                - use rom-size:
                - code:
                    - Code is binary jump.
                    Header:
                        ByteOffset = ByteOffset / BYTES_PER_VAR
                        LabelID = ByteOffset
                        LabelID += 1
                        JumpToLabel numLabels / 2;
                    Label-Boilerplate:
                        Label X
                        if (LabelID < X)
                            JumpToLabel X - (min(X, 1.000 - X) / 2)
                        if (LabelID > X)
                            JumpToLabel X + (min(X, 1.000 - X) / 2)
                        READVAR1 = LABELXVALUE1
                        READVAR2 = LABELXVALUE2
                        EndEventProcessing


            - add MAP-RAM Events: (DMG-RAM)
                - 500 by 500 map.
                - use event template.
                - Add empty events. Only Thing I need is position.

            - write output .xml file.

            - call LCF2XML to turn into mapfile.

        - Create Maptree File:
            - I think I don't need to change the template. should work like that.
            - if I want to support multiple gameboy games and mapfiles later I might need to change it.

            - call LCF2XML to turn into maptreefile.

        - Create Database File:
            - load database-template.
            
            - add CHARA-RAM:
                - add items:
                    - use item template.
                    - create 9216 items.
                    - item-id defines which item type it is.
                
                - add characters:
                    - use character template.
                    - create 2966 characters.

            - add EMU Code:
                - load the emu-code .xml (if available)
                - copy:
                    common events, switches, variables to database.

            - write output .xml file.

            - call LCF2XML to turn into databasefile.
        
        - Create project folder:
            - folder structure (empty folder):
                - Title, System2, System, Sound, Picture, Panorama, Music, Movie, Monster, GameOver, Frame, FaceSet, ChipSet, CharSet, BattleWeapon, BattleCharSet, Battle2, Battle, Backdrop
            - copy compiled data:
                mapfiles (Map0001.lmu,...), maptree (RPG_RT.lmt), database (RPG_RT.ldb)
            - copy required data:
                RPG_RT.ini, *.r3proj, ultimate_rt_eb.dll, RPT_RT.exe
