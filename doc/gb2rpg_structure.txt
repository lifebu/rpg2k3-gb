GB2RPG: Gameboy 2 RPG Maker.
    - .gb   => MAP-ROM + MAP-RAM as .xml => mapfile. 
            => DB-RAM as .xml => databasefile.
            => Emu-Code as .xml => databasefile.
            => creates the entire RPG Maker project.


- TODO:
    - Features:
        - change high-level structure of tool:
            - because creating the map files, database files and maptree files and having all of them stored in memory is too much.
            - structure:
                1st: Create Maps:
                    - Create one Map in Memory.
                    - Save that map as .xml (exportXML).
                    - GoTo next map (change genMapFiles).
                2nd: Create Maptree
                    - Create Maptree in Memory.
                    - Save Maptree to .xml (exportXML).
                3rd: Create Database:
                    - Create Dabase in Memory.
                    - Save Database to .xml (exportXML).
                4th: GenProjectFolder: (rename: GenerateProject())
                    - lcf2xml => generate Binaries.
                    - delete .xml files.
                    - create files/folders necessary for project.
                    

    - Refactor:
        - TinyXML2:
            - Path Traversal:
                - Input a path string to traverse the xml file.
                - Can use * as wildcards.
                    - TraverseElements("EventCommand/*/EventCommand")
                    => Will search the first eventcommand, then skip undefined amount of elements and then stop in the next eventcommand.
            - Add my helper functions to tinyxml2.
                DeepCloneInsertBackAllSiblings to XMLDocument.
                DeepCloneInsertBack to XMLDocument.
                - as wrapper code (?)
        
        - RPGHelper should go into project globals.
                    => RPGHelper => Utility.
        
        - Write Functions for setting/generating event-commands of different types.
            - set/copy/generate ...
            - setCommandParams
                !- GENERAL Function. (element and argument list)
                ALSO:
                    - Create other functions that build on top of that which have types for the parameters.
                    - setConditionalBranchParams etc.
                    - also need Typedefs (enums?) for the paramters, so that I do not punch in magic numbers.
            - setEventIDNameCoord
            - Libraries of Functionality that allows me to manipulate event-commands.
            - should work ontop on the tinyxml2 library and changes I do to that.


        - Good way to map Variable names to IDs inside Maker.

    

    


- thirdparty:
    liblcf
    tinyxml2


- ROM/RAM Data:
    MAP-ROM: Events + Pages
    MAP-RAM: Event + Position!
    DMG-ROM: One Event.

- RPG Info:
    - commands i need:
        - Control Variables:
        - Conditional Branch:
        - Label:
        - Jump to Label
        - Call Event:
        - Comment:

    - Map0001.emu (.xml):
        - <events>: List of events
        - <event id="0001">
            <name>MAP-ROM-001</name>
            <x>0</x>
            <y>0</y>
            <pages>: List of Pages
        - <EventPage id="0001">
        - I do not need to change all the other settings 
            => Can use a template file.

- sequence:
    - read cartridge header:
        - $0100-$014F
            Entry Point:        4 Bytes     Binary
            Nintendo Logo:      48 Byte     Binary
            Title:              11 Byte     ASCII
            Manufacturer Code:  4 Byte      ASCII
            CGB Flag:           1 Byte      Binary
            New Lincensee Code: 2 Byte      Binary
            SGB Flag:           1 Byte      Binary
            Cartridge Type:     1 Byte      Binary
            ROM-Size:           1 Byte      Binary
            RAM-Size:           1 Byte      Binary
            Destination Code:   1 Byte      Binary
            Old Lincensee Code: 1 Byte      Binary
            Version number:     1 Byte      Binary
            Header Checksum:    1 Byte      Binary
            Global Checksum:    2 Byte      Binary
        
        - read ROM-Size and RAM-Size.
        - later: Title (to show in RPG Maker!)
    
    - Create Map File:
        - load map-template

        - add DMG-ROM Event:
            => Create my own DMG-ROM in C-Code similar to Emulator C-Code.
                => good test for emulator.
                => better from a legal standpoint than to use actual DMG-ROM.
                => so this event is different to the other events. Actual logic.
            
            - use event template.
            - Read DMG_ROM.cpp file.
            - use CEC to compile into .xml
            - create an Event to the map with .xml as code.
            
        - add MAP-ROM Events: (Cartridge-ROM)
            - read from actual .gb file (input).
            - use event template.
            - use rom-size:
            - code:
                - Code is binary jump.
                Header:
                    ByteOffset = ByteOffset / BYTES_PER_VAR
                    LabelID = ByteOffset
                    LabelID += 1
                    JumpToLabel numLabels / 2;
                Label-Boilerplate:
                    Label X
                    if (LabelID < X)
                        JumpToLabel X - (min(X, 1.000 - X) / 2)
                    if (LabelID > X)
                        JumpToLabel X + (min(X, 1.000 - X) / 2)
                    READVAR1 = LABELXVALUE1
                    READVAR2 = LABELXVALUE2
                    EndEventProcessing


        - add MAP-RAM Events: (DMG-RAM)
            - 500 by 500 map.
            - use event template.
            - Add empty events. Only Thing I need is position.

        - write output .xml file.

        - call LCF2XML to turn into mapfile.

    - Create Maptree File:
        - I think I don't need to change the template. should work like that.
        - if I want to support multiple gameboy games and mapfiles later I might need to change it.

        - call LCF2XML to turn into maptreefile.

    - Create Database File:
        - load database-template.
        
        - add CHARA-RAM:
            - add items:
                - use item template.
                - create 9216 items.
                - item-id defines which item type it is.
            
            - add characters:
                - use character template.
                - create 2966 characters.

        - add EMU Code:
            - load the emu-code .xml (if available)
            - copy:
                common events, switches, variables to database.

        - write output .xml file.

        - call LCF2XML to turn into databasefile.
    
    - Create project folder:
        - folder structure (empty folder):
            - Title, System2, System, Sound, Picture, Panorama, Music, Movie, Monster, GameOver, Frame, FaceSet, ChipSet, CharSet, BattleWeapon, BattleCharSet, Battle2, Battle, Backdrop
        - copy compiled data:
            mapfiles (Map0001.lmu,...), maptree (RPG_RT.lmt), database (RPG_RT.ldb)
        - copy required data:
            RPG_RT.ini, *.r3proj, ultimate_rt_eb.dll, RPT_RT.exe
    
- Code structure:
    - filepaths should be defined in one header file as #define!
    - to have them globally set!