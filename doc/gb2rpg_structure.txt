GB2RPG: Gameboy 2 RPG Maker.
    - .gb   => MAP-ROM + MAP-RAM as .xml => mapfile. 
            => DB-RAM as .xml => databasefile.
            => Emu-Code as .xml => databasefile.
            => creates the entire RPG Maker project.


- TODO:
    - Reduce Time/Memory Usage in MapGeneration.
        - Pokemon Yellow:
            - OLD: ~11,4GB
            - New: ~7GB
    - Events should each have their own starting position.
        => makes it easier to see the events in editor.
    - How to handle 2-Byte Read if the ByteOffset is the last Byte of the Event-Page?
        => 1 Byte Memory Overlap. The last Address of that Page returns the first byte of the next page as the second value.
        - e.g. first EPage is responsible for Adresses 0-3000_10 Bytes. If I read first EPage @ 3000 ByteOffset It will return that value and second EPage @ 0 ByteOffset the first value it would have returned.

- thirdparty:
    liblcf
    tinyxml2


- ROM/RAM Data:
    MAP-ROM: Events + Pages
    MAP-RAM: Event + Position!
    DMG-ROM: One Event.

- RPG Info:
    - commands i need:
        - Control Variables:
        - Conditional Branch:
        - Label:
        - Jump to Label
        - Call Event:
        - Comment:

    - Map0001.emu (.xml):
        - <events>: List of events
        - <event id="0001">
            <name>MAP-ROM-001</name>
            <x>0</x>
            <y>0</y>
            <pages>: List of Pages
        - <EventPage id="0001">
        - I do not need to change all the other settings 
            => Can use a template file.
        - Multi-Line Comment:
            12410: Start of Comment,
            22410: other lines of comment.
        - Conditional Branch:
            12010: Conditional Branch
            22010: Else
            22011: Branch End
            <parameters>1 5 0 1 0 1</parameters>
                1: Variable Condition:
                5: Variable Index:
                0: Function: (Equal-to)
                1: Value (You want to compar against)
                0: Constant value (1 = variable.)
                1: Do you want else-case?
        - Control Variables:
            10220
            <parameters>0 6 6 0 0 255 0</parameters>
                255: value to set.
                6-6: from Var 6 to Var 6.
        - Call Event:
            12330
            <parameters>0 1 0</parameters>
            0: Type (0 = Common Event, 1 = Map event (const), 2 = Map event (variable))
            1: CommonEventID
            0: other param.
        - Label:
            12110
            <parameters>1000</parameters>
                which label
        - Jump to Label:
            12120
            <parameters>1000</parameters>
                which label

- sequence:
    - read cartridge header:
        - $0100-$014F
            Entry Point:        4 Bytes     Binary
            Nintendo Logo:      48 Byte     Binary
            Title:              11 Byte     ASCII
            Manufacturer Code:  4 Byte      ASCII
            CGB Flag:           1 Byte      Binary
            New Lincensee Code: 2 Byte      Binary
            SGB Flag:           1 Byte      Binary
            Cartridge Type:     1 Byte      Binary
            ROM-Size:           1 Byte      Binary
            RAM-Size:           1 Byte      Binary
            Destination Code:   1 Byte      Binary
            Old Lincensee Code: 1 Byte      Binary
            Version number:     1 Byte      Binary
            Header Checksum:    1 Byte      Binary
            Global Checksum:    2 Byte      Binary
        
        - read ROM-Size and RAM-Size.
        - later: Title (to show in RPG Maker!)
    
    - Create Map File:
        - load map-template

        - add DMG-ROM Event:
            => Create my own DMG-ROM in C-Code similar to Emulator C-Code.
                => good test for emulator.
                => better from a legal standpoint than to use actual DMG-ROM.
                => so this event is different to the other events. Actual logic.
            
            - use event template.
            - Read DMG_ROM.cpp file.
            - use CEC to compile into .xml
            - create an Event to the map with .xml as code.
            
        - add MAP-ROM Events: (Cartridge-ROM)
            - read from actual .gb file (input).
            - use event template.
            - use rom-size:
            - code:
                - Code is binary jump.
                Header:
                    LabelID = ByteOffset / BYTES_PER_VAR
                    JumpToLabel VARS_PER_EPAGE / 2;
                Label-Boilerplate:
                    Label X
                    if (LabelID < (X - 1))
                        JumpToLabel X - (X/2)
                    if (LabelID > (X - 1))
                        JumpToLabel X + (X/2)
                    READVAR1 = LABELXVALUE1
                    READVAR2 = LABELXVALUE2
                    EndEventProcessing


        - add MAP-RAM Events: (DMG-RAM)
            - 500 by 500 map.
            - use event template.
            - Add empty events. Only Thing I need is position.

        - write output .xml file.

        - call LCF2XML to turn into mapfile.

    - Create Maptree File:
        - I think I don't need to change the template. should work like that.
        - if I want to support multiple gameboy games and mapfiles later I might need to change it.

        - call LCF2XML to turn into maptreefile.

    - Create Database File:
        - load database-template.
        
        - add CHARA-RAM:
            - add items:
                - use item template.
                - create 9216 items.
                - item-id defines which item type it is.
            
            - add characters:
                - use character template.
                - create 2966 characters.

        - add EMU Code:
            - load the emu-code .xml (if available)
            - copy:
                common events, switches, variables to database.

        - write output .xml file.

        - call LCF2XML to turn into databasefile.
    
    - Create project folder:
        - folder structure (empty folder):
            - Title, System2, System, Sound, Picture, Panorama, Music, Movie, Monster, GameOver, Frame, FaceSet, ChipSet, CharSet, BattleWeapon, BattleCharSet, Battle2, Battle, Backdrop
        - copy compiled data:
            mapfiles (Map0001.lmu,...), maptree (RPG_RT.lmt), database (RPG_RT.ldb)
        - copy required data:
            RPG_RT.ini, *.r3proj, ultimate_rt_eb.dll, RPT_RT.exe
    
- Code structure:
    - filepaths should be defined in one header file as #define!
    - to have them globally set!