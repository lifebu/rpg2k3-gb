CppRPGEnv: C++-RPG Maker Environment
    - C++-code can be run outside of RPG Maker so that I can debug it normally without dependencies.
        - Plattform Code that runs my code (kinda like engine).

- To-Do:
    - Clean up the Renderer classes:
        - The 3 Rendererclasses (ChoiceBox, InputBox and TextBox) share a lot of code just have it in the RenderManager.
            
        - I can more clearly seperate the Render stuff from the Logic of moving the textbox.
            - Most of the code of the textbox seems to belong more to actual game logic not rendering.
            - currently a lot of those classes have some game logic and some render logic.
            - Maybe some of the "game logic" stuff either wanders into a seperate manager or is part of the RPGMakerInterface?

        - Initialization based on the view does not need to happen when you open Textboxes etc. it can happen once and be done once IFF the view could change (which it cannot).

    - Think again about the Interface.
        - Currently it is a 1-to-1 mapping to the commands in RPG Maker that are not basic logic features.
        - Think about how it would be easiest to use.
        - Reduce the number of namespaces I have to go through:
            lcf::ShowPicture::PictureIDType::CONSTANT
        - ShowPicture():
            Should be in RPGMaker coordinates.
        - If I have a more simplified interface I need to document the transformation from the easier interface to the actual RPGMaker commands.
        - Think about how some information can be infered with the compiler later.
            - If this can be infered, than I don't need to set it here.
        
        - example:
        ShowPicture(pictureID, x, y, r, g, b).
        - pictureID or x,y can be either be constants or variables.
        => 4 overloads:
        rpgMaker->ShowPicture(pictureID, x, y, Vector3(0.5f, 0.5f, 0.5f)); // var id, var pos
        rpgMaker->ShowPicture(0, x, y, Vector3(0.5f, 0.5f, 0.5f));         // const id, var pos
        rpgMaker->ShowPicture(pictureID, 0, 0, Vector3(0.5f, 0.5f, 0.5f)); // var id, const pos
        rpgMaker->ShowPicture(0, 0, 0, Vector3(0.5f, 0.5f, 0.5f));         // const id, const pos
        All of those overloads can be easily detected by the compiler.
    
    - Think about how I want to handle the RPGMaker variables.

    - Should I rename character to actor?

    - How do I handle event calls?
        - How Do I handle map event calls?

            - 1. & 2. Call MAP_ROM & DMG_ROM: 
                - Call a function that returns the value you want to read from the rom to a location in Cartridge ROM (like the one I generate).
                - Simplest version: 
                    - Size of the MapRomHeader and MapRomLabel are known 
                    - use MEMORYSIZES::MAP_ROM_HEADER_COUNT and MEMORYSIZES::MAP_ROM_LABEL_COUNT
                    - use that to calculate which command to look into in the event to get the data.
            
            - 3. Call MAP_RAM: => NOOP.
                - For that I need to know if the called event is a map-ram, how?
    
    - To reduce loading times add serializer flags to the database and map serializer:
        - Flags allow you to skip loading the variables, switches and map events commands.
                
    
    - I need a better log/error system for my code base.
        - logfile.
        - ImGUI.
        - MessageBox: To inform about errors existing.
        - cout.

    - The Environment should have a print system.
        - That system prints errors into cout and as the DebugMessages on Screen.
        - Would be nice to have a viewable log in the environment itself.
        - You can show the log somehow. Maybe even integrate Dear ImGUI?
    
    - Generally having a better way to display errors / logs in both systems would be nice.
        - logfile.
        - ImGUI.
        - cout.

- Interface:
    - RPG Maker Commands:
        Debug & Menu:
            Show Text:
                - could redirect to cout.
            Show Choices:
            Input Number:
        CHARA RAM:
            Change Item
            Change Party Member
            Change EXP
            Change Parameters
            Change Equipment:
        Events:
            Set Event Location
            Get Event ID
            Erase Event
            Call Event
            End Event Processing
            Comment
        Rendering:
            Show Picture
            Show/Hide Player
        Input:
            Key Input Processing
    
    - Other RPG Maker Related Functions:
        Setting Name of Variables/Switches.

    - Interface to Emu:
        - Just have one Function in Emulator called "RPGMain" that is entry point from Env and CodeGen will generate a Common Event from that (which is the first one).
        - This function can be implemented from interface class?
    
    - Interface to Env:
        - One Interface class that has the commands to the environment where CodeGen will generate fitting EventCommands (ShowPicture, ShowChoices, etc)

- Logic Flow:
    - Structure:
        - Multiple Managers (singletons), that can be initialized independent from ctor.
        - InputManager:
            - Either directly use sfml::Keyboard or sfml::Events to update input.
            - If sfml::Keyboard changes during frame this can cause Problems.
            - Translate simplified inputs (up/down, cancel, select) into sfml::KeyCodes using a Key mapping (non changeable!).
        
        - RenderManager:
            - Stateful renderer. 
            - It's state are changed with some RPGMaker commands (ShowPicture, ShowChoices).
            - Every frame it uses it's state to draw using sfml.
        
        - LCFManager:
            - responsible for the lcf data (database and maps).
            - it loads the lcf-files at the start to initialize everything.
    
        - StateManager:
            - Different states some of them will not call the emulator:
                - So the emulator has to do x cpu-cycles per frame.
                - It already did y of them, so z = x - y are left.
                - The ShowText is triggered. it knows how many are still left. 
                    => Show text immediately closes RPGMain.
                - Then we don't update emu until textbox is closed again.
                - we go back to RunRPGMain State and the emulator will do the last z cycles.
                - Then in one go it will udpate the renderer.
        
    - Startup:
        - Initialize Managers.
        - Load lcf files:
            - Render some debug text to show loading.
            - So do we have some kind of state machine?
            - load a single lcf file per update and once loading is complete change to the running state.
    
    - Shutdown:
        - Shutdown Managers.
        
    - Each Update:
        - EventProc function:
            - Reacts to events maybe updates inputs.
            - Update Inputs:
                - Maybe I don't need to do that if I can query the input every time.
            
        - Call "RPGMain" (Game Update)
            - This will change the actual state of the game.

        - Render to screen.
            - RenderManager renders the current state to the screen.
  
    - Framerate:
        - Add some checks to see of the call to RPGMain is longer than 1/60 fps ~ 16.66ms

    - Rendering:
        - Idea:
            - Basically keep the entire state in Memory and when Rendering iterate over that.
            - State can be the current pictures in Program that are loaded.
            - Functions from Interface like "ShowPicture" will change the state of the Environment.
        - Resolution:
            4:3, 
        - Show Text:
            - Textbox: 30% of Bottom Screen, Blue.
            - 4 lines of text can fit.
        - Show Choices:
            - 4 possible Inputs to choose from. Same Textbox
            - just 4 lines of Text to select from.
        - Input Number:
            - x number of digits.
            - basically like a pad lock.
        - Show Picture:
            - Basically just a sprite!.
        - Show/Hide Player (Ignore!).

    - Key Input:
        - Basically just a few keyboard keys you can use.
        - I need to create a complete state of the keyboard. AFAIK sfml does not allow to just querry the keystate at any time.
    
    - Logic Flow for different RPG Maker Commands:
        Debug & Menu
        - ShowText:
            - Renderer: 
                - Textbox: bottom 35% of screen.
                - 4 lines of text.
                - 50 characters without face graphic, 38 characters with face graphic per line.
            - State: 
                - Freezes Emulator.
            - Input: 
                - Enter/Cancel => Player closes the textbox.
            - LCF: 
                - Nothing.

        - ShowChoices:
            - Renderer:
                - Textbox: bottom 35% of screen. 
                - <= 4 lines of text (depending on number of choices).
                - selection Rectangle.
            - State:
                - Freezes Emulator
            - Input:
                - Up/Down: Change selection (wraps)
                - Enter: Select.
                - Escape: Cancel (either disabled, or default choice).
            - LCF: 
                - Write selected choice to variable.

        - InputNumber:
            - Renderer:
                - Textbox: bottom 35% of screen.
                - One line of text (generated from current number) with 1-7 digits.
                - selection rectangle
            - State:
                - Freezes Emulator
            - Input:
                - Up/Down: Increment/Decrement current digit.
                - Left/Right: Move current digit selection (No wrap).
                - Select: Accept Input.
            - LCF: 
                - Write selected number to variable.

        Chara Ram
        - ChangeItem:
            - Renderer:
                - Nothing
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - Write change into character.

        - ChangePartyMember:
            - Renderer:
                - Nothing
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - Write change into character.

        - ChangeEXP:
            - Renderer:
                - Nothing
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - Write change into character.

        - ChangeParameters:
            - Renderer:
                - Nothing
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - Write change into character.

        - ChangeEquipment:
            - Renderer:
                - Nothing
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - Write change into character.

        Events
        - SetEventLocation:
            - Renderer:
                - Nothing
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - Write change into event.

        - GetEventID:
            - Renderer:
                - Nothing
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - Write event id into variable.

        - EraseEvent:
            - Renderer:
                - Nothing
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - Erase event in map.

        - CallEvent:
            - Renderer:
                - Nothing
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - I don't know if this will be supported like that?

        Rendering
        - ShowPicture:
            - Renderer:
                - Either allocate a new picture (if it is a previously unknown id) or change parametrs of the picture.
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - Nothing

        - ShowHidePlayer:
            - Renderer:
                - Not used by the environment?
            - State:
                - Nothing
            - Input:
                - Nothing
            - LCF: 
                - Nothing

        Input
        - KeyInputProcessing:
            - Renderer:
                - Nothing
            - State:
                - Nothing
            - Input:
                - Get the input state and create the number (1-24)
            - LCF: 
                - Store the number into the variable specified.
    

- Can use SFML to create the basic graphic/window layer.
    https://www.sfml-dev.org